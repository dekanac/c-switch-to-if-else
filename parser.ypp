%{

#include <iostream>
#include <string>
#include <cstdlib>
#include <string>
#include <vector>
#include <utility>
#include "ast.hpp"

//#define YYDEBUG 1

extern int yylex();

extern Module* TheModule;
extern LLVMContext TheContext;
extern legacy::FunctionPassManager* TheFPM;

void yyerror(std::string s) {
    std::cerr << s << std::endl;
    exit(EXIT_FAILURE);
}

%}

%union {
    ExprAST* e;
    double d;
    int i;
    std::vector<std::pair<std::pair<ExprAST*, ExprAST*>, bool>> *vec_pair;
    std::pair<std::pair<ExprAST*, ExprAST*>, bool> *pair;
    std::string *s;
    std::vector<std::string> *vec;
    std::vector<ExprAST*> *vec_e;
    std::vector<TypeAST*> *vec_t;
    PrototypeAST *p;
    TypeAST *t;
    Type *type;
}

%token if_token else_token while_token for_token switch_token
case_token int_token double_token char_token default_token eq_token
include_token ppd_token void_token ne_token ge_token le_token break_token
%token <s> id_token string_token
%token <d> d_num_token
%token <i> i_num_token

%type <type> Type
%type <e> E Loop_or_E Loop Block SwitchStatement
%type <vec> ArrOfInits
%type <vec_e> Block1 FCArgs FCArgs1
%type <t> TypeArg
%type <p> Proto
%type <vec_t> Args
%type <pair> Case
%type <vec_pair> CaseArr

%nonassoc else_token 
%right '='
%left '<' '>' eq_token le_token ge_token ne_token
%left '+' '-'
%left '*' '/'

%%

Program: Program Function
    |    Function
    | include_token ppd_token
    | include_token string_token
    ;

Function: Proto '{' Block '}' {
        FunctionAST* f = new FunctionAST($1, $3);
        f->codegen();
        delete f;
    }
    | Proto ';' {
        $1->codegen();
        delete $1;
    }
    ;

Block: Block1  {
        $$ = new BlockAST(*$1);
        delete $1;
    }
    ;

Block1: Block1 Loop_or_E  {
        $$ = $1;
        $$->push_back($2);
    }
    | Loop_or_E {
        $$ = new std::vector<ExprAST*>();
        $$->push_back($1);
    }
    ;

Loop_or_E: Loop     { $$ = $1; }
    |      E ';'    { $$ = $1; }
    ;

Loop: if_token '(' E ')' '{' Block '}' else_token '{' Block '}' {
        $$ = new IfExprAST($3, $6, $10);
    }
    | if_token '(' E ')' '{' Block '}' {
        $$ = new IfExprAST($3, $6, nullptr);
    }
    | while_token '(' E ')' '{' Block '}' {
        $$ = new WhileExprAST($3, $6);
    }
    | SwitchStatement { $$ = $1; }
    ;

    
SwitchStatement: switch_token '(' E ')' '{' CaseArr '}' {
        $$ = new SwitchExprAST($3, *$6);
        //delete $6;
    }
    ;

CaseArr: CaseArr Case {
        $$ = $1;
        $$->push_back(*$2);
    }
    | Case { 
        $$ = new std::vector<std::pair<std::pair<ExprAST*, ExprAST*>, bool>>();
        $$->push_back(*$1);
    }
    ;

Case: case_token i_num_token ':' Block  {
        
        auto num = new IntNumberExprAST($2);
        auto r = std::make_pair((ExprAST*)num, $4);
        auto p = std::make_pair(r, false);
        $$ = &p;
       
    }
    | case_token i_num_token ':' Block break_token ';' {
        
        auto num = new IntNumberExprAST($2);
        auto r = std::make_pair((ExprAST*)num, $4);
        auto p = std::make_pair(r, true);
        $$ = &p;

    }
    | default_token ':' Block {
    
        auto r = std::make_pair((ExprAST*)nullptr, $3);
        auto p = std::make_pair(r, false);
        $$ = &p;
    }
    ;
 
Proto: Type id_token '(' Args ')' {
    $$ = new PrototypeAST($1, *$2, *$4);
    delete $2;
    delete $4;
}
    ;

Type: int_token     { $$ = Type::getInt32Ty(TheContext); }
    | double_token  { $$ = Type::getDoubleTy(TheContext); }
    | void_token    { $$ = Type::getVoidTy(TheContext); }
    ;

Args: Args ',' TypeArg  { $$ = $1; $$->push_back($3); }
    | TypeArg           { $$ = new std::vector<TypeAST*>(); $$->push_back($1); }
    |                   { $$ = new std::vector<TypeAST*>(); }
    ;

TypeArg: double_token id_token  { $$ = new TypeAST(Type::getDoubleTy(TheContext),
    *$2); delete $2; }
    |    int_token id_token     { $$ = new TypeAST(Type::getInt32Ty(TheContext),
    *$2); delete $2; }
    ;

E:    E '+' E           { $$ = new AddExprAST($1, $3); }
    | E '-' E           { $$ = new SubExprAST($1, $3); }
    | E '*' E           { $$ = new MulExprAST($1, $3); }
    | E '/' E           { $$ = new DivExprAST($1, $3); }
    | E '>' E           { $$ = new GtExprAST($1, $3); }
    | E '<' E           { $$ = new LtExprAST($1, $3); }
    | E ge_token E      { $$ = new GeExprAST($1, $3); }
    | E le_token E      { $$ = new LeExprAST($1, $3); }
    | E ne_token E      { $$ = new NeExprAST($1, $3); }
    | E eq_token E      { $$ = new EqExprAST($1, $3); }
    | id_token '=' E    { $$ = new AssignExprAST(*$1, $3); delete $1;}
    | Type id_token '=' E {
        $$ = new DeclAndAssignExprAST($1, *$2, $4);
        delete $2;
    }
    | id_token '(' FCArgs ')' { 
        $$ = new CallExprAST(*$1, *$3);
        delete $1;
        delete $3;
    }
    | Type ArrOfInits   { $$ = new DeclExprAST($1, *$2); delete $2; }
    | '(' E ')'         { $$ = $2; }
    | i_num_token       { $$ = new IntNumberExprAST($1); }
    | d_num_token       { $$ = new DoubleNumberExprAST($1); }
    | id_token          { $$ = new VariableExprAST(*$1); delete $1; }
    ;
    
FCArgs: FCArgs1 { $$ = $1; }
    | { $$ = new std::vector<ExprAST*>(); }
    ;

FCArgs1: FCArgs1 ',' E  { $$ = $1; $$->push_back($3); }
    | E                 { $$ = new std::vector<ExprAST*>(); $$->push_back($1); }
    ;

ArrOfInits: ArrOfInits ',' id_token {
        $$ = $1;
        $$->push_back(*$3);
        delete $3;
    }
    | id_token {
        $$ = new std::vector<std::string>();
        $$->push_back(*$1);
        delete $1;
    }
    ;

%%



int main(int argc, char **argv) {
    
    #if YYDEBUG
        yydebug = 1;
    #endif
    
    TheFpmAndModuleInit();
    
    yyparse();

    TheModule->print(outs(), nullptr);
    delete TheModule;
    delete TheFPM;
    return 0;
}
